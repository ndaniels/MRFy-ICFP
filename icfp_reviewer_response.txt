Thanks for the help!  We're especially grateful for detailed questions
about such things as type definitions, which highlight issues we
overlooked.  We believe we can revise the paper to address most
concerns.  There are a couple of areas where reviewers may have
misunderstood our intent and we are not sure how best to revise the
paper.

As several reviewers recommend, we will present more comparison (and
more quantitative comparison) with previous C++ software.  We have few
quantitative measures that bear on "convenience, readability, and
productivity", but we will present the measures we have and will make
them easy to compare.  We will also discuss how Haskell might scale to
problems previously solved using C++.

We will provide a more thorough and more quantitative discussion of
performance, including measurements of parallel speedup and discussion
of parallelism.  Where possible we will present apples-to-apples
comparisons of Haskell and C++ codes.  Elsewhere we can compare
performance of Haskell code with the performance of C++ code on
different but related problems.

Reviewer A asks if MRFy is available.  The project PI (Daniels's PhD
supervisor) has agreed to release the source code before ICFP opens.
If reviewers want access now, we can provide a private copy.

Reviewer A asks why HMMState contains only tags and not data.  On
reflection, we think this type should not have been called a 'state'.
We plan to change the name, improve the presentation, and explain the
data type better.

Two reviewers ask about laziness.  We believe it was useful but not
instrumental.  To confirm, we will do and report on some experiments
with strictness annotations.

We will report in more detail that the profile was not useful because
it was too slow, even when using few annotations.

We will do our best to clear up the presentation of the Viterbi
algorithm and to characterize the cases we have omitted.

Reviewer C asks what functionality was duplicated in Section 3.2.
We will clarify: we meant that our Haskell code includes new
implementations of algorithms already implemented in C++ in both SMURF
and HMMER.  The revised paper will say more explicitly that this
reimplementation is a cost of using Haskell.  We suspect other
researchers may pay similar costs.

Reviewer C asks if SearchStrategy would have been as convenient using
conventional object-oriented techniques.  We will add the question to
the paper, with this answer: it is *easier* to create a SearchStrategy
in Haskell than using conventional object-oriented techniques, because
all the functions in a SearchStrategy are partial applications of
other functions.  In Haskell, capturing the partially applied
arguments is effortless; using conventional object-oriented
techniques, we would have to declare subclasses with instance
variables and would have to write code to initialize objects of those
subclasses. 

Reviewer D suggests comparing memoization using Data.Memocombinators
with table lookups in other languages.  We will contrast our Haskell
experience with our prior work implementing dynamic programming in C++.  
C++ requires much more bookkeeping.

Referee D asks for other problems in computational biology that would
make use of our experience.  We have applied Haskell to problems of
gene functional annotation given a genetic-interaction graph, using
standard graph algorithms.  We are also prototyping code to identify
compensatory genetic pathways ("Between-pathway models") in the yeast
genome.   Both of these efforts are much less mature than MRFy, and we
are not sure what, if anything, to say about them in the paper.

Referee D suggests the paper's title is too broad.  We certainly want
the title to reflect our experience accurately; if the paper does not
deliver on the promise implicit in the title, that's bad for us and
for ICFP.  But we would also like the paper to reach an audience
beyond the ICFP community.  In particular, if a graduate student in
computational biology wants to try Haskell, we would like this paper
to be usable as evidence.  We had hoped that a computational biologist
faced with a new problem would not take a short paper as
representative of all of computational biology, but instead would
evaluate the experience we describe and would decide whether the
evidence we present supports the use of Haskell for the new problem.

Perhaps a member of the program committee can suggest a title that is
accurate but is not so narrow as to rule out many problems in
computational biology?
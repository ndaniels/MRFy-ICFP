#!/usr/bin/env lua

local multicore_times = {
  { cores =  1, time = 134.2, error = 1.933 },
  { cores =  2, time = 83.0,   error = 0.099 },
  { cores =  4, time = 46.8, error = 0.208 },
  { cores =  8, time =  26.9, error = 0.216 },
  { cores = 12, time =  22.5, error = 0.327 },
  { cores = 16, time =  21.0, error = 0.301 },
  { cores = 24, time =  21.9, error = 0.512 },
  { cores = 48, time =  77.5, error = 8.574 },
}

local sequential_time = 134 -- ???

local template = [[
newgraph
  xaxis label fontsize 9
  yaxis label fontsize 9
  xaxis no_auto_hash_labels size 2.5 $log min 1 max $xmax label : Processing cores
  yaxis size 1.3 min 0 max $ymax label : $ylabel
  newcurve pts $pts
  $labels
]]

local function fill(s, fields)
  return (s:gsub('%$(%w+)', fields))
end

local function labels()
  local l = { 'xaxis no_auto_hash_marks' }
  for _, pt in ipairs(multicore_times) do
    table.insert(l, string.format('  xaxis hash_label at %d : %d',
                                  pt.cores, pt.cores))
    table.insert(l, string.format('  xaxis hash_at %d', pt.cores))
  end
  return table.concat(l, '\n')
end

local function speedup()
  local fields = { ylabel = "Speedup", ymax = '7 hash 1 mhash 1', xmax = 50,
                   labels = 'xaxis auto_hash_labels', log = '' }
  local points = ""
  for _, pt in ipairs(multicore_times) do
    points = string.format("%s %d %.2f", points, pt.cores, sequential_time / pt.time)
  end
  fields.pts = points
  return fill(template, fields)
end


  
local function efficiency()
  local fields = { ylabel = "Parallel efficiency", ymax = 1.0, xmax = 48,
                   log = 'log', labels = labels(),
                 }
  local points = ""
  for _, pt in ipairs(multicore_times) do
    points = string.format("%s %d %.2f", points, pt.cores,
                           sequential_time / (pt.time * pt.cores))
  end
  fields.pts = points
  return fill(template, fields)
end

local function set(filename, s)
  local f = io.open(filename, 'w')
  f:write(s, '\n')
  f:close()
end

set('speedup.j', speedup())
set('efficiency.j', efficiency())
